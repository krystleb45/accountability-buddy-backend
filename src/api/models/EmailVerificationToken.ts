import type { Document, Model, Types } from "mongoose";
import mongoose, { Schema } from "mongoose";
import crypto from "crypto";

// --- Interface ---
export interface IEmailVerificationToken extends Document {
  user: Types.ObjectId;    // Reference to the User
  token: string;           // Verification token
  expiresAt: Date;         // Expiration date of the token
  createdAt: Date;         // Auto-generated by timestamps
  updatedAt: Date;         // Auto-generated by timestamps

  // Instance methods
  isExpired(): boolean;
}

// --- Model Interface ---
export interface IEmailVerificationTokenModel extends Model<IEmailVerificationToken> {
  generate(userId: Types.ObjectId, expiresInHours?: number): Promise<IEmailVerificationToken>;
  findValid(token: string): Promise<IEmailVerificationToken | null>;
}

// --- Schema Definition ---
const EmailVerificationTokenSchema = new Schema<IEmailVerificationToken>(
  {
    user: { type: Schema.Types.ObjectId, ref: "User", required: true, index: true },
    token: { type: String, required: true, unique: true, index: true },
    expiresAt: { type: Date, required: true, index: true },
  },
  {
    timestamps: true,
    toJSON: { virtuals: false },
    toObject: { virtuals: false },
  }
);

// --- TTL Index to auto-delete expired tokens ---
EmailVerificationTokenSchema.index({ expiresAt: 1 }, { expireAfterSeconds: 0 });

// --- Instance Methods ---
EmailVerificationTokenSchema.methods.isExpired = function (this: IEmailVerificationToken): boolean {
  return this.expiresAt.getTime() <= Date.now();
};

// --- Static Methods ---
/**
 * Generate a new verification token for a user, valid for expiresInHours (default 24h)
 */
EmailVerificationTokenSchema.statics.generate = async function (
  userId: Types.ObjectId,
  expiresInHours = 24
): Promise<IEmailVerificationToken> {
  const tokenString = crypto.randomBytes(32).toString("hex");
  const expiresAt = new Date(Date.now() + expiresInHours * 3600 * 1000);

  const doc = new this({ user: userId, token: tokenString, expiresAt });
  await doc.save();
  return doc;
};

/**
 * Find a valid (non-expired) token document
 */
EmailVerificationTokenSchema.statics.findValid = async function (
  token: string
): Promise<IEmailVerificationToken | null> {
  const doc = await this.findOne({ token });
  if (!doc || doc.isExpired()) return null;
  return doc;
};

// --- Model Export ---
export const EmailVerificationToken = mongoose.model<
  IEmailVerificationToken,
  IEmailVerificationTokenModel
>("EmailVerificationToken", EmailVerificationTokenSchema);

export default EmailVerificationToken;
