import type { Document, Model, Types } from "mongoose";
import mongoose, { Schema } from "mongoose";
import sanitize from "mongo-sanitize";

// --- Interface for GoalMessage Document ---
export interface IGoalMessage extends Document {
  goal: Types.ObjectId;      // Reference to the Goal
  sender: Types.ObjectId;    // Reference to the User sending the message
  message: string;           // Message text
  isDeleted: boolean;        // Soft-delete flag
  createdAt: Date;           // Auto-generated by timestamps
  updatedAt: Date;           // Auto-generated by timestamps

  // Instance methods
  softDelete(): Promise<IGoalMessage>;
}

// --- Interface for GoalMessage Model Statics ---
export interface IGoalMessageModel extends Model<IGoalMessage> {
  getMessagesByGoal(goalId: Types.ObjectId, limit?: number): Promise<IGoalMessage[]>;
}

// --- Schema Definition ---
const GoalMessageSchema = new Schema<IGoalMessage, IGoalMessageModel>(
  {
    goal: {
      type: Schema.Types.ObjectId,
      ref: "Goal",
      required: true,
      index: true,
    },
    sender: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true,
      index: true,
    },
    message: {
      type: String,
      required: [true, "Message content is required"],
      trim: true,
      minlength: [1, "Message cannot be empty"],
      maxlength: [500, "Message cannot exceed 500 characters"],
    },
    isDeleted: {
      type: Boolean,
      default: false,
      index: true,
    },
  },
  {
    timestamps: true,
    toJSON: { virtuals: false },
    toObject: { virtuals: false },
  }
);

// --- Indexes ---
GoalMessageSchema.index({ goal: 1, createdAt: -1 });
GoalMessageSchema.index({ sender: 1, createdAt: -1 });

// --- Middleware ---
GoalMessageSchema.pre<IGoalMessage>("save", function (next: (err?: Error) => void) {
  try {
    this.message = sanitize(this.message);
    next();
  } catch (err) {
    next(err as Error);
  }
});

// --- Static Methods ---
/**
 * Fetch recent non-deleted messages for a goal, sorted by newest first
 */
GoalMessageSchema.statics.getMessagesByGoal = function (
  this: IGoalMessageModel,
  goalId: Types.ObjectId,
  limit = 50
): Promise<IGoalMessage[]> {
  return this.find({ goal: goalId, isDeleted: false })
    .sort({ createdAt: -1 })
    .limit(limit)
    .populate("sender", "username profilePicture");
};

// --- Instance Methods ---
/**
 * Soft-delete this message
 */
GoalMessageSchema.methods.softDelete = async function (
  this: IGoalMessage
): Promise<IGoalMessage> {
  this.isDeleted = true;
  await this.save();
  return this;
};

// --- Model Export ---
export const GoalMessage = mongoose.model<IGoalMessage, IGoalMessageModel>(
  "GoalMessage",
  GoalMessageSchema
);

export default GoalMessage;
